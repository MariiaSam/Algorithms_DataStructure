Алгоритми пошуку

1. Лінійний пошук
Це найпростіший алгоритм пошуку, який використовується для знаходження певного елемента в списку (масиві).
З точки зору часу виконання, лінійний пошук може бути досить повільним для великих списків. У найгіршому випадку (коли елемент або не знаходиться у списку, або є останнім елементом списку), лінійний пошук має лінійну часову складність 
O(n), де n — це кількість елементів у списку. Однак, у середньому випадку, коли елемент може знаходитись на будь-якій позиції у списку, очікувана часова складність становить O(n/2), що все ще лінійно. 

2. Двійковий (бінарний) пошук
Це ефективний алгоритм пошуку, який працює на відсортованих списках (масивах). Його принцип роботи полягає в тому, що він розділяє список навпіл і перевіряє, чи є середній елемент тим, що ми шукаємо. Якщо це так, ми знаходимо наше значення і завершуємо пошук. Якщо ні, ми можемо відкинути половину списку, в якому знаходимося, та продовжимо пошук в іншій половині.
Час виконання двійкового пошуку становить O(n), але двійковий алгоритм потребує, щоб масив був відсортований.


3. Інтерполяційний пошук — це алгоритм пошуку, який використовує ідею інтерполяції для пошуку елемента у відсортованому списку або масиві. Він працює швидше, ніж бінарний пошук для списків з великим розмахом значень, де ключі розподілені рівномірно.
Формула базується на відношенні різниці між значенням ключа і нижньою межею до різниці між верхньою та нижньою межами. Це надає нам можливість розрахувати, де у відсортованому масиві, який має рівномірний розподіл, може знаходитися елемент пошуку. 
Основний принцип роботи алгоритму полягає в тому, що він розраховує потенційне положення значення елемента пошуку, а потім здійснює перевірку. Залежно від результату перевірки він коригує свої наступні кроки, поки не знайде значення пошуку або не визначить, що такого значення немає у списку. 
Основна перевага інтерполяційного пошуку перед бінарним полягає в тому, що він може виконуватися швидше у списках, де елементи розподілені рівномірно.
Очікувана часова складність інтерполяційного пошуку для рівномірно розподілених даних становить O(loglogn), де n — це кількість елементів у масиві.

Однак у найгіршому випадку (наприклад, коли дані сильно зосереджені в одному місці), інтерполяційний пошук може деградувати до лінійної часової складності 
O(n).





4. Хеш-таблиці та хеш-функції
Хеш-таблиці — це реалізація асоціативного масиву, списку пар ключ-значення, які дозволяють отримати значення за допомогою ключа. Внутрішня хеш-таблиця використовує хеш-функцію для перетворення значення ключа в індекс, який вказує на те, де саме значення зберігається в пам’яті.





